if (typeof hasRun === 'undefined') {
    document.getElementById("_").scrollIntoView();

    var viewSwitcher = document.querySelector('#toolbar fieldset');
    var container = document.querySelector('#container');
    var breadcrumbs = document.querySelector('#breadcrumbs');
    var panels = document.querySelector('#panels');
    var searchInput = document.querySelector('#search');
    var content = null;

    var backdrop = document.querySelector('#backdrop');
    var uploader = document.querySelector('#uploader');
    var uploader_target = document.querySelector('#uploader_target');
    var uploader_preview = document.querySelector('#uploader_preview');

    var uploadedImages = localStorage.getItem("uploadedImages");
    if (uploadedImages == null) {
        uploadedImages = [];
    } else {
        uploadedImages = JSON.parse(uploadedImages);
    }

    function path() {
        return decodeURI(window.location.pathname).substr(1);
    }

    function loadCharactersImages() {
        // scan for characters without images
        var drops = document.querySelectorAll('.characters .drop');
        drops.forEach(function(someDrop) {
            var name = someDrop.getAttribute('data-name');
            var key = path() + "/Characters/" + name;
            if (!uploadedImages.includes(key)) {
                return;
            }
            if (someDrop.classList.contains('image')) {
                localStorage.removeItem(key);
                uploadedImages = uploadedImages.filter(function(item) {
                    return item !== key;
                });
            } else {
                var image = localStorage.getItem(key);
                someDrop.setAttribute("style", `background-image: url(${image})`);
            }
        });
        localStorage.setItem("uploadedImages", JSON.stringify(uploadedImages));
    }

    var view = localStorage.getItem('view') || 'icons';
    if (view != 'icons' && view != 'list' && view != 'columns') {
        view = 'icons';
    }
    document.body.setAttribute('data-view', view);
    viewSwitcher.querySelector(`input[value=${view}]`).checked = true;

    var setView = function(value) {
        view = value;
        localStorage.setItem('view', value);
        document.body.setAttribute('data-view', value);
        document.getElementById("_").scrollIntoView();
    };

    // if enter or space is pressed on a toolbar item, check the radio button
    viewSwitcher.addEventListener('keydown', (event) => {
        if (event.key === 'Enter' || event.key === ' ') {
            event.target.querySelector('input').checked = true;
            setView(event.target.querySelector('input').value);
        }
    });

    viewSwitcher.addEventListener('change', (event) => {
        setView(event.target.value);
    });

    // save focus
    var focusedLink = localStorage.getItem('focusedLink');
    function saveFocus(link) {
        if (link === undefined) {
            focusedLink = document.activeElement.getAttribute("href");
        } else {
            focusedLink = link;
        }
        localStorage.setItem('focusedLink', focusedLink);
    }
    function restoreFocus(when) {
        if (focusedLink) {
            var suffix = "";
            if (view !== "columns") {
                suffix = ":last-child";
            }

            var link = document.querySelector(`.panel${suffix} a[href="${focusedLink}"]`);
            if (link) {
                link.focus();
            } else {
                // focus on first link in last panel
                var lastPanel = document.querySelector('.panel:last-of-type');
                if (lastPanel) {
                    var link = lastPanel.querySelector('a');
                    if (link) {
                        link.focus();
                    } else {
                        console.log("no link in last panel");
                    }
                }
            }
            return;
        }

        // focus on first link in last panel
        var lastPanel = document.querySelector('.panel:last-of-type');
        if (lastPanel) {
            var link = lastPanel.querySelector('a');
            if (link) {
                link.focus();
            } else {
                console.log("no link in last panel");
            }
        }
    }

    // htmx.on('htmx:beforeSwap', function(evt) {
    //     saveFocus();
    // });

    htmx.on('htmx:afterSwap', function(evt) {
        breadcrumbs = document.querySelector('#breadcrumbs');
        // if #content is present, focus on it
        content = document.querySelector('.content');
        if (!content || view === "columns") {
            restoreFocus("afterSwap");
        }
        document.getElementById("_").scrollIntoView();
    });

    htmx.on('htmx:pushedIntoHistory', function(evt) {
        loadCharactersImages();

        // update link rel="edit"
        var editLink = document.querySelector('link[rel="edit"]');
        if (!editLink) {
            editLink = document.createElement('link');
            editLink.rel = "edit";
            document.head.appendChild(editLink);
        }

        if (content) {
            if (content.dataset.source) {
                editLink.href = "https://github.com/alsosee/info/edit/main/" + content.dataset.source;
            } else {
                editLink.href = "https://github.com/alsosee/info/new/main/" + content.dataset.dir + "/?filename=" + encodeURI(content.dataset.name) + ".yml";
            }
        } else {
            editLink.href = "https://github.com/alsosee/info/tree/main/" + path();
        }
    });

    /* search */
    var client = new MeiliSearch({
        host: "{{ config "SearchHost" }}",
        apiKey: "{{ config "SearchAPIKey" }}",
    });

    function thumbStylePx(media, max, prefix) {
        if (!media) {
            return "";
        }

        var backgroundWidth = media.ThumbTotalWidth * max / media.ThumbWidth;
        var backgroundHeight = media.ThumbTotalHeight * max / media.ThumbWidth;
        var positionX = (media.ThumbXOffset || 0) * max / media.ThumbWidth;
        var positionY = (media.ThumbYOffset || 0) * max / media.ThumbWidth;
        var width = max;
        var height = media.ThumbHeight * max / media.ThumbWidth;

        if (media.Height > media.Width) {
          backgroundWidth = media.ThumbTotalWidth * max / media.ThumbHeight;
          backgroundHeight = media.ThumbTotalHeight * max / media.ThumbHeight;
          positionX = (media.ThumbXOffset || 0) * max / media.ThumbHeight;
          positionY = (media.ThumbYOffset || 0) * max / media.ThumbHeight;
          width = media.ThumbWidth * max / media.ThumbHeight;
          height = max;
        }

        var marginLeft = (max - width) / 2;
        var marginRight = max - width - marginLeft;
        var marginTop = (max - height) / 2;
        var marginBottom = max - height - marginTop;

        var style = `${prefix}background-size: ${backgroundWidth.toFixed(2)}px ${backgroundHeight.toFixed(2)}px; ${prefix}width: ${width.toFixed(2)}px; ${prefix}height: ${height.toFixed(2)}px`;

        if (marginLeft != 0 || marginRight != 0) {
          style += `; ${prefix}comp-margin-left: ${marginLeft.toFixed(2)}px; ${prefix}comp-margin-right: ${marginRight.toFixed(2)}px`;
        }

        if (marginTop != 0 || marginBottom != 0) {
          style += `; ${prefix}comp-margin-top: ${marginTop.toFixed(2)}px; ${prefix}comp-margin-bottom: ${marginBottom.toFixed(2)}px`;
        }

        if (positionX != 0 || positionY != 0) {
          style += `; ${prefix}background-position: -${positionX.toFixed(2)}px -${positionY.toFixed(2)}px`;
        }

        return style;
    }

    /* Because search naviration is not a real navigation,
      * we need to backup the state of the page
      * before search, and restore it after search is cleared */
    var titleBackup = "";
    var breadcrumbsBackup;
    var panelsBackup = "";
    var previousQuery = "";
    var urlBackup = "";

    function search(event, pushState = true) {
        var query = event.target.value || "";
        if (query.length == 0) {
            // query is cleared, restore the original state
            if (breadcrumbsBackup) {
                breadcrumbs.innerHTML = breadcrumbsBackup;
                breadcrumbsBackup = "";
            }
            if (panelsBackup) {
                panels.innerHTML = panelsBackup;
                panelsBackup = "";
            }
            if (titleBackup) {
                document.title = titleBackup;
                titleBackup = "";
            }
            previousQuery = "";
            console.log("Restoring original state", urlBackup, titleBackup);
            if (urlBackup.length == 0) {
                // a corner case when page is loaded with a query, and then the query is cleared
                console.log("Navigating to home");
                logo.querySelector("a").click();
                return;
            }
            if (pushState) {
                console.log("Pushing state", urlBackup);
                history.pushState({}, "", urlBackup);
                urlBackup = "";
            }
            return;
        }
        if (previousQuery.length == 0) {
            // previous query was empty, save the state
            breadcrumbsBackup = breadcrumbs.innerHTML;
            panelsBackup = panels.innerHTML;
            urlBackup = window.location.href;
            titleBackup = document.title;
            console.log("Saving original state", window.location.href);
        }

        // push history update and change URL
        if (pushState) {
            console.log("Pushing state", query);
            history.pushState({query: query}, "", "/search?q=" + encodeURIComponent(query));
            document.title = "Search: " + query;
        }

        breadcrumbs.innerHTML = `<li role="none"><a role="menuitem" href="/">Home</a></li><li role="none"><span>Search: ${query}</span></li>`;
        if (previousQuery.length == 0) {
            panels.innerHTML = `<ul class="panel menubar-navigation" role="menu" data-level="0" id="_"></ul>`;
        }

        console.log("Setting previousQuery to", query);
        previousQuery = query;

        client.index("info").search(query, {limit: 100}).then((response) => {
            // if the query has changed, ignore the response
            if (previousQuery != query) {
                return;
            }

            const results = response.hits.map(function(hit) {
                const path = hit.Source.substring(0, hit.Source.lastIndexOf('.'))
                const dir = path.substring(0, path.lastIndexOf('/'));
                var attr = "";
                if (hit.Image) {
                    const ext = hit.Image.Path.substring(hit.Image.Path.lastIndexOf('.') + 1)
                    var linkClass = "has-image";
                    if (ext == "jpg" || ext == "jpeg") {
                        linkClass += " jpg";
                    }

                    attr = `style="--background-image: url('https://media.alsosee.info/${dir}/${hit.Image.ThumbPath}'); ${thumbStylePx(hit.Image, 100, "--")}; ${thumbStylePx(hit.Image, 24, "--small-")}" class="${linkClass}"`;
                }
                return {
                    name: hit.Name || hit.Title,
                    href: path,
                    attr: attr,
                };
            });

            const resultsHTML = results.map(function(result) {
                return `<li role="none">
                    <a role="menuitem" ${result.attr} href="/${result.href}">
                        <span>${result.name}</span>
                    </a>
                </li>`;
            }).join("");

            panels.innerHTML = `<ul class="panel menubar-navigation" role="menu" data-level="0" id="_">${resultsHTML}</ul>`;
        });
    }
    // restore the search query if the user navigates back
    window.addEventListener('popstate', function(event) {
        console.log("Popstate", event.state, "URL", window.location.href);
        var query = "";
        if (event.state !== null && event.state.query !== undefined) {
            query = event.state.query;
            document.title = "Search: " + query;
            search({target: {value: query}}, false);
            searchInput.value = query;
        }

        if (event.state == null) {
            // check, maybe there is a query in the URL
            if (window.location.pathname.startsWith("/search")) {
                const url = new URL(window.location.href);
                query = url.searchParams.get("q");
                document.title = "Search: " + query;
                search({target: {value: query}}, false);
                searchInput.value = query;
                return;
            }

            // return to empty search state
            search({target: {value: ""}}, false);
            searchInput.value = "";
        }
    });
    // on page load, restore the search query if there is one
    window.addEventListener('load', function(event) {
        loadCharactersImages();
        const url = new URL(window.location.href);
        const query = url.searchParams.get("q");
        if (query) {
            previousQuery = query; // bugfix for cases where the user navigates back to the empty search from a page that was loaded directly with a search query
            search({target: {value: query}}, false);
            document.title = "Search: " + query;
            searchInput.value = query;
        }

        content = document.querySelector('.content');

        restoreFocus("load");
    });

    /* handle drag and drop */
    var c = null; /* croppie instance */

    function extension(mime) {
        switch (mime) {
        case "image/jpeg":
            return ".jpg";
        case "image/png":
            return ".png";
        case "image/gif":
            return ".gif";
        default:
            return "";
        }
    }

    function download(binary, mime) {
        const a = document.createElement('a');
        a.href = 'data:' + mime + ';base64,' + btoa(binary);
        a.download = uploader.dataset.target;
        a.click();
    }

    function uploader_cancel() {
        backdrop.style.display = 'none';
        uploader.style.display = 'none';
        c.destroy();
    }

    function uploader_upload() {
        c.result({
            type: 'blob',
            size: 'viewport',
            format: 'jpeg'
        }).then(function(blob) {
            // read converted JPEG image
            const reader = new FileReader();
            reader.onloadend = function() {
                // put base64-encoded image into style attribute
                drop.setAttribute('style', `background-image: url(${reader.result})`);

                // store the image in local storage to persist it across page reloads till it approved
                localStorage.setItem(path() + "/Characters/" + uploader.dataset.target, reader.result);
                uploadedImages.push(path() + "/Characters/" + uploader.dataset.target);
                localStorage.setItem("uploadedImages", JSON.stringify(uploadedImages));
            };
            reader.readAsDataURL(blob);

            fetch('/upload', {
                method: 'PUT',
                headers: {
                  'x-file-name': encodeURIComponent(path() + "/Characters/" + uploader.dataset.target + ".jpg"),
                },
                body: blob
            }).then(function(response) {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Response was not ok: ' + response.statusText);
            }).then(function(data) {
                console.log(data);
                uploader_cancel();
            }).catch(function(error) {
                console.log('Failed to upload image', error);
            });
        });
    }

    document.addEventListener('dragover', function (event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
    });

    var drop;
    document.addEventListener('drop', function (event) {
        event.preventDefault();

        drop = event.target;
        if (!drop.classList.contains('drop')) {
            return;
        }
        name = drop.dataset.name;

        if (name === null || name === undefined || name === "") {
            return;
        }

        uploader_target.innerText = name;
        uploader.dataset.target = name;

        backdrop.style.display = 'block';
        uploader.style.display = 'flex';

        opts = {
            viewport: {
                type: "circle",
                width: 400,
                height: 400
            }
        }
        c = new Croppie(uploader_preview, opts);

        var reader = new FileReader();
        reader.onload = function(e) {
            c.bind({url: e.target.result});
        }

        if (event.dataTransfer.files.length > 0) {
            reader.readAsDataURL(event.dataTransfer.files[0]);
        } else if (event.dataTransfer.items.length > 0) {
            var link = event.dataTransfer.getData('text/x-moz-url');

            if (link.match(/src="([^"]*)"/)) {
                // parse <img src ...> from link
                link = link.match(/src="([^"]*)"/)[1];
            }

            if (link) {
                request = new XMLHttpRequest();
                request.open('GET', "/get?url="+encodeURIComponent(link));
                request.responseType = 'blob';
                request.onload = function() {
                    reader.readAsDataURL(request.response);
                };
                request.send();
            }
        }
    });

    // keyboard
    function click(link) {
        // create a new link element and click it
        var e = document.createElement('a');
        e.href = link;
        e.click();
    }
    document.addEventListener('keydown', function(e) {
        if (event.isComposing || event.keyCode === 229) {
            return;
        }
        e.stopImmediatePropagation();
        if (e.keyCode === 190) { // .
            if (document.querySelector('head link[rel="edit"]')) {
                click(document.querySelector('head link[rel="edit"]').href);
            }
            return;
        }
        if (e.keyCode === 191) { // /
            searchInput.focus();
            e.preventDefault();
            return;
        }
        if (e.altKey && e.keyCode === 49) { // alt + 1: icons view
            viewSwitcher.querySelector('input[value="icons"]').checked = true;
            setView('icons');
            return;
        }
        if (e.altKey && e.keyCode === 50) { // alt + 2: list view
            viewSwitcher.querySelector('input[value="list"]').checked = true;
            setView('list');
            return;
        }
        if (e.altKey && e.keyCode === 51) { // alt + 3: column view
            viewSwitcher.querySelector('input[value="columns"]').checked = true;
            setView('columns');
            return;
        }

        if (e.altKey && e.keyCode === 40) { // alt + down
            // same as clicking focused link
            if (document.activeElement.tagName === "A") {
                document.activeElement.click();
            }
            return;
        }

        if (e.altKey && e.keyCode === 38) { // alt + up
            if (content && document.activeElement === content) {
                // if scroll postion is not at the top, do nothing (let the browser scroll)
                if (content.scrollTop > 0) {
                    return;
                }
            }

            var panels = Array.from(document.querySelectorAll('.panel'))
            var index;
            // if focused element is a link in .panel, move to the previous panel
            // focus on element with "in-path" class or first link
            if (document.activeElement.tagName === "A" && document.activeElement.closest('.panel')) {
                var panel = document.activeElement.closest('.panel');
                index = panels.indexOf(panel);
            }

            // if page has .content, move to the previous panel
            if (content) {
                index = panels.length;
            }

            if (index > 0) {
                var links = Array.from(panels[index - 1].querySelectorAll('a'));
                var link = links.find(function(link) {
                    return link.classList.contains('in-path');
                });
                if (link) {
                    saveFocus(link.getAttribute('href'));
                    console.log('focus on in-path link', link.getAttribute('href'), link);
                }
                // click on breadcrumbs last link
                var pathLinks = breadcrumbs.querySelectorAll("a");
                if (pathLinks.length > 0) {
                    pathLinks[pathLinks.length - 1].click();
                }
            }
            return;
        }

        if (e.keyCode === 40 && view !== "icons") { // down
            // todo: make this work with list and icons view
            // if focused element is a link in .panel, move to the next link
            if (document.activeElement.tagName === "A" && document.activeElement.closest('.panel')) {
                var links = Array.from(document.activeElement.closest('.panel').querySelectorAll('a'));
                var index = links.indexOf(document.activeElement);
                if (index < links.length - 1) {
                    links[index + 1].focus();
                    saveFocus();

                    if (view === "columns") {
                        links[index + 1].click();
                    }
                }
                return;
            } else {
                if (content) {
                    if (document.activeElement !== content) {
                        content.focus();
                    }
                    return;
                }
                // focus on first link in the last panel
                var panels = Array.from(document.querySelectorAll('.panel'));
                var links = Array.from(panels[panels.length - 1].querySelectorAll('a'));
                if (links.length > 0) {
                    links[0].focus();
                    saveFocus();
                }
            }
        }

        if (e.keyCode === 38 && view !== "icons") { // up
            // todo: make this work with list and icons view
            // if focused element is a link in .panel, move to the previous link
            if (document.activeElement.tagName === "A" && document.activeElement.closest('.panel')) {
                var links = Array.from(document.activeElement.closest('.panel').querySelectorAll('a'));
                var index = links.indexOf(document.activeElement);
                if (index > 0) {
                    links[index - 1].focus();
                    saveFocus();

                    if (view === "columns") {
                        links[index - 1].click();
                    }
                }
                return;
            }
        }

        if (e.keyCode === 37 && view === "columns") { // left
            // if focused element is a link in .panel, link in the previous panel that has "in-path" class
            if (document.activeElement.tagName === "A" && document.activeElement.closest('.panel')) {
                var panel = document.activeElement.closest('.panel');
                var panels = Array.from(document.querySelectorAll('.panel'));
                var index = panels.indexOf(panel);
                if (index > 0) {
                    var links = Array.from(panels[index - 1].querySelectorAll('a'));
                    var inPath = links.find(function(link) {
                        return link.classList.contains('in-path');
                    });
                    if (inPath) {
                        inPath.focus();
                        inPath.scrollIntoView();
                        saveFocus();
                    }
                }
                return;
            }
            // if focused element is .content, move to the previous panel "in-path" link
            if (document.activeElement.classList.contains('content')) {
                var panel = document.activeElement.previousElementSibling;
                var links = Array.from(panel.querySelectorAll('a'));
                var inPath = links.find(function(link) {
                    return link.classList.contains('in-path');
                });
                if (inPath) {
                    inPath.focus();
                    inPath.scrollIntoView();
                    saveFocus();
                }
                return;
            }
        }

        if (e.keyCode === 39 && view === "columns") { // right
            // if focused element is a link in .panel, link in the next panel that has "in-path" class
            if (document.activeElement.tagName === "A" && document.activeElement.closest('.panel')) {
                var panel = document.activeElement.closest('.panel');
                var panels = Array.from(document.querySelectorAll('.panel'));
                var index = panels.indexOf(panel);
                if (index < panels.length - 1) {
                    var links = Array.from(panels[index + 1].querySelectorAll('a'));
                    var inPath = links.find(function(link) {
                        return link.classList.contains('in-path');
                    });
                    if (inPath) {
                        inPath.focus();
                        saveFocus();
                    } else {
                        // select first link
                        links[0].focus();
                        saveFocus();
                        links[0].click();
                    }
                } else if (content) {
                    // focus on .content
                    content.focus();
                    content.scrollIntoView();
                }
                return;
            }
        }
    });

    hasRun = true;
}
