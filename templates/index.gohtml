<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="apple-mobile-web-app-title" content="Also, see">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <title>{{ title .Breadcrumbs }}</title>
    <link rel="stylesheet" href="/style.css?crc={{ crc32 "style.css" }}">
    <script src="https://unpkg.com/htmx.org@1.9.4" integrity="sha384-zUfuhFKKZCbHTY6aRR46gxiqszMk5tcHjsVFxnUo8VMus4kHGVdIYVbOYYNlKmHV" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css">
    <link rel="apple-touch-icon" href="/favicon.png">
    <link rel="icon" type="image/png" sizes="192x192" href="/favicon_192r.png">
    <link rel="icon" type="image/png" sizes="512x512" href="/favicon_512r.png">
    <link rel="manifest" href="/manifest.webmanifest">
    <script src="/meilisearch.umd.js"></script>
</head>
<body data-view="columns">
<div id="toolbar" hx-preserve="true">
    <div id="logo"><a href="/"></a></div>
    <label id="searchWrapper">
        <input id="search" type="search" role="searchbox" placeholder="Search" oninput="search(event)" autocomplete="off">
    </label>
    <fieldset
        class="radio menubar-navigation"
        title="Show items as icons, in a list or in columns"
        role="menubar"
        aria-label="View"
    >
        <legend>View</legend>
        <label tabindex="0" role="menuitem"><input type="radio" name="view" value="icons"> <span>Icons</span></label>
        <label tabindex="0" role="menuitem"><input type="radio" name="view" value="list"> <span>List</span></label>
        <label tabindex="0" role="menuitem"><input type="radio" name="view" value="columns" checked> <span>Columns</span></label>
    </fieldset>
</div>
<nav>
    <ul id="breadcrumbs" class="menubar-navigation" role="menubar" aria-label="breadcrumbs">
        {{- range .Breadcrumbs }}
        {{- $slash := "/" }}
        {{- if eq .Path "" }}
        {{- $slash = "" }}
        {{- end }}
        {{- $isCurrent := eq $.CurrentPath .Path }}
        {{- if $isCurrent }}
        <li role="none"><span>
            {{- if and $.Content $.Content.Name }}
                {{- $.Content.Name }}
            {{- else }}
                {{- .Name }}
            {{- end -}}
        </span></li>
        {{- else }}
        <li role="none"><a role="menuitem" href="/{{ .Path }}{{ $slash }}">{{ .Name }}</a></li>
        {{- end }}
        {{- end }}
    </ul>
</nav>
<div id="container" hx-boost="true">
    <nav id="panels">
    {{- range $index, $panel := .Panels }}
        <ul class="panel menubar-navigation" role="menu" data-level="{{ $index }}"
            {{- if and (not $.Content) (isLast $index (len $.Panels)) }} id="_"{{ end }}>
            {{- range $panel.Files }}
            {{- $path := join $panel.Dir .Name }}
            <li role="none">
                <a
                    role="menuitem"
                    {{- if .Image }}style="--background-image: url('https://media.alsosee.info/{{ $panel.Dir }}/{{ .Image.ThumbPath }}'); {{ thumbStylePx .Image 100 "--" }}; {{ thumbStylePx .Image 24 "--small-" }}"{{ end }}
                    class="{{ if .IsFolder }}folder{{ if hasPrefix $.CurrentPath $path }} in-path{{ end }}{{ end }}{{ if eq $.CurrentPath $path }} active{{ end }}{{ if .Image }} has-image{{ if isJPG .Image.Path }} jpg{{end}}{{- if hasPrefix $.CurrentPath "People" }} people{{ end }}{{ end }}"
                    href="/{{ $path }}{{ if .IsFolder }}/{{ end }}"
                >
                    <span>{{ .Title }}</span>
                </a>
            </li>
            {{- end }}
        </ul>
    {{- end }}
    {{ if .Content }}
        {{ template "content" . }}
        <div id="_"></div>
    {{ end }}
    </nav>
</div>
<div id="backdrop" style="display: none"></div>
<div id="uploader" style="display: none">
    <h1 id="uploader_target"></h1>
    <div id="uploader_preview"></div>
    <div class="buttons">
      <button class="dismiss" onclick="uploader_cancel()">Cancel</button>
      <button class="primary" onclick="uploader_upload()">Upload</button>
    </div>
</div>
<script type="text/javascript">
if (typeof hasRun === 'undefined') {
    document.getElementById("_").scrollIntoView();

    var viewSwitcher = document.querySelector('#toolbar fieldset');
    var container = document.querySelector('#container');
    var breakcrumbs = document.querySelector('#breakcrumbs');
    var panels = document.querySelector('#panels');
    var searchInput = document.querySelector('#search');

    var backdrop = document.querySelector('#backdrop');
    var uploader = document.querySelector('#uploader');
    var uploader_target = document.querySelector('#uploader_target');
    var uploader_preview = document.querySelector('#uploader_preview');

    var uploadedImages = localStorage.getItem("uploadedImages");
    if (uploadedImages == null) {
        uploadedImages = [];
    } else {
        uploadedImages = JSON.parse(uploadedImages);
    }

    function path() {
        return decodeURI(window.location.pathname).substr(1);
    }

    function loadCharactersImages() {
        // scan for characters without images
        var drops = document.querySelectorAll('.characters .drop');
        drops.forEach(function(someDrop) {
            var name = someDrop.getAttribute('data-name');
            var key = path() + "/Characters/" + name;
            if (!uploadedImages.includes(key)) {
                return;
            }
            if (someDrop.classList.contains('image')) {
                localStorage.removeItem(key);
            } else {
                var image = localStorage.getItem(key);
                someDrop.setAttribute("style", `background-image: url(${image})`);
            }
        });
    }

    var view = localStorage.getItem('view') || 'icons';
    if (view != 'icons' && view != 'list' && view != 'columns') {
        view = 'icons';
    }
    document.body.setAttribute('data-view', view);
    viewSwitcher.querySelector(`input[value=${view}]`).checked = true;

    var setView = function(value) {
        localStorage.setItem('view', value);
        document.body.setAttribute('data-view', value);
        document.getElementById("_").scrollIntoView();
    };

    // if enter or space is pressed on a toolbar item, check the radio button
    viewSwitcher.addEventListener('keydown', (event) => {
        if (event.key === 'Enter' || event.key === ' ') {
            event.target.querySelector('input').checked = true;
            setView(event.target.querySelector('input').value);
        }
    });

    viewSwitcher.addEventListener('change', (event) => {
        setView(event.target.value);
    });

    htmx.on('htmx:afterSwap', function(evt) {
        document.getElementById("_").scrollIntoView();
    });

    htmx.on('htmx:pushedIntoHistory', function(evt) {
        loadCharactersImages();
    });

    /* search */
    var client = new MeiliSearch({
        host: "{{ config "SearchHost" }}",
        apiKey: "{{ config "SearchAPIKey" }}",
    });

    function thumbStylePx(media, max, prefix) {
        if (!media) {
            return "";
        }

        var backgroundWidth = media.ThumbTotalWidth * max / media.ThumbWidth;
        var backgroundHeight = media.ThumbTotalHeight * max / media.ThumbWidth;
        var positionX = (media.ThumbXOffset || 0) * max / media.ThumbWidth;
        var positionY = (media.ThumbYOffset || 0) * max / media.ThumbWidth;
        var width = max;
        var height = media.ThumbHeight * max / media.ThumbWidth;

        if (media.Height > media.Width) {
          backgroundWidth = media.ThumbTotalWidth * max / media.ThumbHeight;
          backgroundHeight = media.ThumbTotalHeight * max / media.ThumbHeight;
          positionX = (media.ThumbXOffset || 0) * max / media.ThumbHeight;
          positionY = (media.ThumbYOffset || 0) * max / media.ThumbHeight;
          width = media.ThumbWidth * max / media.ThumbHeight;
          height = max;
        }

        var marginLeft = (max - width) / 2;
        var marginRight = max - width - marginLeft;
        var marginTop = (max - height) / 2;
        var marginBottom = max - height - marginTop;

        var style = `${prefix}background-size: ${backgroundWidth.toFixed(2)}px ${backgroundHeight.toFixed(2)}px; ${prefix}width: ${width.toFixed(2)}px; ${prefix}height: ${height.toFixed(2)}px`;

        if (marginLeft != 0 || marginRight != 0) {
          style += `; ${prefix}comp-margin-left: ${marginLeft.toFixed(2)}px; ${prefix}comp-margin-right: ${marginRight.toFixed(2)}px`;
        }

        if (marginTop != 0 || marginBottom != 0) {
          style += `; ${prefix}comp-margin-top: ${marginTop.toFixed(2)}px; ${prefix}comp-margin-bottom: ${marginBottom.toFixed(2)}px`;
        }

        if (positionX != 0 || positionY != 0) {
          style += `; ${prefix}background-position: -${positionX.toFixed(2)}px -${positionY.toFixed(2)}px`;
        }

        return style;
    }

    /* Because search naviration is not a real navigation,
     * we need to backup the state of the page
     * before search, and restore it after search is cleared */
    var titleBackup = "";
    var breadcrumbsBackup;
    var panelsBackup = "";
    var previousQuery = "";
    var urlBackup = "";

    function search(event, pushState = true) {
        var query = event.target.value || "";
        if (query.length == 0) {
            // query is cleared, restore the original state
            if (breadcrumbsBackup) {
                breadcrumbs.innerHTML = breadcrumbsBackup;
                breadcrumbsBackup = "";
            }
            if (panelsBackup) {
                panels.innerHTML = panelsBackup;
                panelsBackup = "";
            }
            if (titleBackup) {
                document.title = titleBackup;
                titleBackup = "";
            }
            previousQuery = "";
            console.log("Restoring original state", urlBackup, titleBackup);
            if (urlBackup.length == 0) {
                // a corner case when page is loaded with a query, and then the query is cleared
                console.log("Navigating to home");
                logo.querySelector("a").click();
                return;
            }
            if (pushState) {
                console.log("Pushing state", urlBackup);
                history.pushState({}, "", urlBackup);
                urlBackup = "";
            }
            return;
        }
        if (previousQuery.length == 0) {
            // previous query was empty, save the state
            breadcrumbsBackup = breadcrumbs.innerHTML;
            panelsBackup = panels.innerHTML;
            urlBackup = window.location.href;
            titleBackup = document.title;
            console.log("Saving original state", window.location.href);
        }

        // push history update and change URL
        if (pushState) {
            console.log("Pushing state", query);
            history.pushState({query: query}, "", "/search?q=" + encodeURIComponent(query));
            document.title = "Search: " + query;
        }

        breadcrumbs.innerHTML = `<li role="none"><a role="menuitem" href="/">Home</a></li><li role="none"><span>Search: ${query}</span></li>`;
        if (previousQuery.length == 0) {
            panels.innerHTML = `<ul class="panel menubar-navigation" role="menu" data-level="0" id="_"></ul>`;
        }

        console.log("Setting previousQuery to", query);
        previousQuery = query;

        client.index("info").search(query, {limit: 100}).then((response) => {
            // if the query has changed, ignore the response
            if (previousQuery != query) {
                return;
            }

            const results = response.hits.map(function(hit) {
                const path = hit.Source.substring(0, hit.Source.lastIndexOf('.'))
                const dir = path.substring(0, path.lastIndexOf('/'));
                var attr = "";
                if (hit.Image) {
                    const ext = hit.Image.Path.substring(hit.Image.Path.lastIndexOf('.') + 1)
                    var linkClass = "has-image";
                    if (ext == "jpg" || ext == "jpeg") {
                        linkClass += " jpg";
                    }

                    attr = `style="--background-image: url('https://media.alsosee.info/${dir}/${hit.Image.ThumbPath}'); ${thumbStylePx(hit.Image, 100, "--")}; ${thumbStylePx(hit.Image, 24, "--small-")}" class="${linkClass}"`;
                }
                return {
                    name: hit.Name || hit.Title,
                    href: path,
                    attr: attr,
                };
            });

            const resultsHTML = results.map(function(result) {
                return `<li role="none">
                    <a role="menuitem" ${result.attr} href="/${result.href}">
                        <span>${result.name}</span>
                    </a>
                </li>`;
            }).join("");

            panels.innerHTML = `<ul class="panel menubar-navigation" role="menu" data-level="0" id="_">${resultsHTML}</ul>`;
        });
    }
    // restore the search query if the user navigates back
    window.addEventListener('popstate', function(event) {
        console.log("Popstate", event.state, "URL", window.location.href);
        var query = "";
        if (event.state !== null && event.state.query !== undefined) {
            query = event.state.query;
            document.title = "Search: " + query;
            search({target: {value: query}}, false);
            searchInput.value = query;
        }

        if (event.state == null) {
            // check, maybe there is a query in the URL
            if (window.location.pathname.startsWith("/search")) {
                const url = new URL(window.location.href);
                query = url.searchParams.get("q");
                document.title = "Search: " + query;
                search({target: {value: query}}, false);
                searchInput.value = query;
                return;
            }

            // return to empty search state
            search({target: {value: ""}}, false);
            searchInput.value = "";
        }
    });
    // on page load, restore the search query if there is one
    window.addEventListener('load', function(event) {
        loadCharactersImages();
        const url = new URL(window.location.href);
        const query = url.searchParams.get("q");
        if (query) {
            previousQuery = query; // bugfix for cases where the user navigates back to the empty search from a page that was loaded directly with a search query
            search({target: {value: query}}, false);
            document.title = "Search: " + query;
            searchInput.value = query;
        }
    });

    /* handle drag and drop */
    var c = null; /* croppie instance */

    function extension(mime) {
        switch (mime) {
        case "image/jpeg":
            return ".jpg";
        case "image/png":
            return ".png";
        case "image/gif":
            return ".gif";
        default:
            return "";
        }
    }

    function download(binary, mime) {
        const a = document.createElement('a');
        a.href = 'data:' + mime + ';base64,' + btoa(binary);
        a.download = uploader.dataset.target;
        a.click();
    }

    function uploader_cancel() {
        backdrop.style.display = 'none';
        uploader.style.display = 'none';
        c.destroy();
    }

    function uploader_upload() {
        c.result({
            type: 'blob',
            size: 'viewport',
            format: 'jpeg'
        }).then(function(blob) {
            // read converted JPEG image
            const reader = new FileReader();
            reader.onloadend = function() {
                // put base64-encoded image into style attribute
                drop.setAttribute('style', `background-image: url(${reader.result})`);

                // store the image in local storage to persist it across page reloads till it approved
                localStorage.setItem(path() + "/Characters/" + uploader.dataset.target, reader.result);
                uploadedImages.push(path() + "/Characters/" + uploader.dataset.target);
                localStorage.setItem("uploadedImages", JSON.stringify(uploadedImages));
            };
            reader.readAsDataURL(blob);

            fetch('/upload', {
                method: 'PUT',
                headers: {
                  'x-file-name': encodeURIComponent(path() + "/Characters/" + uploader.dataset.target + ".jpg"),
                },
                body: blob
            }).then(function(response) {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Response was not ok: ' + response.statusText);
            }).then(function(data) {
                console.log(data);
                uploader_cancel();
            }).catch(function(error) {
                console.log('Failed to upload image', error);
            });
        });
    }

    document.addEventListener('dragover', function (event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
    });

    var drop;
    document.addEventListener('drop', function (event) {
        event.preventDefault();

        drop = event.target;
        if (!drop.classList.contains('drop')) {
            return;
        }
        name = drop.dataset.name;

        if (name === null || name === undefined || name === "") {
            return;
        }

        uploader_target.innerText = name;
        uploader.dataset.target = name;

        backdrop.style.display = 'block';
        uploader.style.display = 'flex';

        opts = {
            viewport: {
                type: "circle",
                width: 400,
                height: 400
            }
        }
        c = new Croppie(uploader_preview, opts);

        var reader = new FileReader();
        reader.onload = function(e) {
            c.bind({url: e.target.result});
        }

        if (event.dataTransfer.files.length > 0) {
            reader.readAsDataURL(event.dataTransfer.files[0]);
        } else if (event.dataTransfer.items.length > 0) {
            var link = event.dataTransfer.getData('text/x-moz-url');

            if (link.match(/src="([^"]*)"/)) {
                // parse <img src ...> from link
                link = link.match(/src="([^"]*)"/)[1];
            }

            if (link) {
                request = new XMLHttpRequest();
                request.open('GET', "/get?url="+encodeURIComponent(link));
                request.responseType = 'blob';
                request.onload = function() {
                    reader.readAsDataURL(request.response);
                };
                request.send();
            }
        }
    });

    const hasRun = true;
}
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>
</body>
</html>
